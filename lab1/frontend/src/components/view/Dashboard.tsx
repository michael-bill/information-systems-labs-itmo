import React from "react";
import {
  RiHomeSmileLine,
  RiMapPinLine,
  RiSearchLine,
  RiMoneyDollarCircleLine,
  RiSubwayLine,
} from "react-icons/ri";
import { useStorage } from "../../storage/storage";
import * as dashboardApi from "../../api/rest/dashboard";
import PopUpWindow from "../PopUpWindow";
import Toast from "../Toast";
import { Flat } from "../../types/Flat";

const Dashboard = () => {
  const { token } = useStorage();
  const [specialOperations, setSpecialOperations] = React.useState({
    nameSubstring: "",
    id1: "",
    id2: "",
    X: 0,
    Y: 0,
  });
  const [popupContent, setPopupContent] = React.useState<string | null>(null);
  const [toast, setToast] = React.useState<{
    message: string;
    type: "success" | "error" | "warning";
  } | null>(null);

  const handleSpecialOperation = async (operation: string) => {
    try {
      let response;
      switch (operation) {
        case "minBathrooms":
          response = await dashboardApi.findMinBathrooms(token);
          if (response.status === 200) {
            const flat = response.data;
            setPopupContent(
              `üìç –ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç\n
              ID: ${flat.id}
              üè† –ù–∞–∑–≤–∞–Ω–∏–µ:  ${flat.name}
              üöø –í–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:  ${flat.numberOfBathrooms}
              üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:  ${flat.price.toLocaleString('ru-RU')} ‚ÇΩ
              üèòÔ∏è –î–æ–º:  ${flat.house.name}`
            );
          }
          break;
        case "maxCoordinates":
          response = await dashboardApi.findMaxCoordinates(token);
          if (response.status === 200) {
            const flat: Flat = response.data;
            setPopupContent(
              `üìç –ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏\n
              ID: ${flat.id}
              üè† –ù–∞–∑–≤–∞–Ω–∏–µ:  ${flat.name}
              üìå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:  (${flat.coordinates.x}, ${flat.coordinates.y})
              üìÆ –î–æ–º:  ${flat.house.name}`
            );
          }
          break;
        case "findByNamePrefix":
          response = await dashboardApi.findByNamePrefix(token, specialOperations.nameSubstring);
          if (response.status === 200) {
            if (response.data.length > 0) {
              const flatsList: Flat[] = response.data
                .map((flat: Flat, index: number) => 
                  `${index + 1}. ${flat.name}\n`
                )
                .join('\n\n');
              setPopupContent(
                `üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n
                ${flatsList}`
              );
            } else {
              setToast({ message: "–ö–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", type: "warning" });
            }
          }
          break;
        case "comparePrices":
          response = await dashboardApi.comparePrices(token, specialOperations.id1, specialOperations.id2);
          if (response.status === 200) {
            const cheaperFlat: Flat = response.data;
            setPopupContent(
              `üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω\n
              üè† –ë–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞:  ${cheaperFlat.name}
              üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:  ${cheaperFlat.price.toLocaleString('ru-RU')} ‚ÇΩ`
            );
          }
          break;
        case "sortByMetroTime":
          response = await dashboardApi.sortByMetroTime(token, specialOperations.X, specialOperations.Y);
          if (response.status === 200) {
            const sortedList: Flat[] = response.data
              .map((flat: Flat, index: number) => 
                `${index + 1}. ${flat.name}\n  üïí ${flat.timeToMetroByTransport} –º–∏–Ω—É—Ç –¥–æ –º–µ—Ç—Ä–æ`
              )
              .join('\n\n');
            setPopupContent(
              `üöá –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –º–µ—Ç—Ä–æ\n
              ${sortedList}`
            );
          }
          break;
      }

      if (response && response.status !== 200) {
        setToast({
          message: response.data.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏",
          type: "warning",
        });
      }
    } catch (error) {
      setToast({
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.",
        type: "error",
      });
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
          <p className="mt-2 text-gray-600">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <OperationCard
            icon={<RiHomeSmileLine className="text-blue-500 text-2xl" />}
            title="–ú–∏–Ω–∏–º—É–º –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç"
            description="–ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç"
            onExecute={() => handleSpecialOperation("minBathrooms")}
          />

          <OperationCard
            icon={<RiMapPinLine className="text-green-500 text-2xl" />}
            title="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
            description="–ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"
            onExecute={() => handleSpecialOperation("maxCoordinates")}
          />

          <OperationCard
            icon={<RiSearchLine className="text-yellow-500 text-2xl" />}
            title="–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É"
            description="–ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –Ω–∞–∑–≤–∞–Ω–∏—è"
            input={{
              value: specialOperations.nameSubstring,
              onChange: (value) => setSpecialOperations(prev => ({ ...prev, nameSubstring: value })),
              placeholder: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å"
            }}
            onExecute={() => handleSpecialOperation("findByNamePrefix")}
          />

          <OperationCard
            icon={<RiMoneyDollarCircleLine className="text-red-500 text-2xl" />}
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω"
            description="–°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã –¥–≤—É—Ö –∫–≤–∞—Ä—Ç–∏—Ä"
            input={{
              value: specialOperations.id1,
              onChange: (value) => setSpecialOperations(prev => ({ ...prev, id1: value })),
              placeholder: "ID –ø–µ—Ä–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã"
            }}
            secondInput={{
              value: specialOperations.id2,
              onChange: (value) => setSpecialOperations(prev => ({ ...prev, id2: value })),
              placeholder: "ID –≤—Ç–æ—Ä–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã"
            }}
            onExecute={() => handleSpecialOperation("comparePrices")}
          />

          <OperationCard
            icon={<RiSubwayLine className="text-purple-500 text-2xl" />}
            title="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Ç—Ä–æ"
            description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –º–µ—Ç—Ä–æ"
            input={{
              value: specialOperations.X.toString(),
              onChange: (value) => setSpecialOperations(prev => ({ ...prev, X: parseFloat(value) || 0 })),
              placeholder: "X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –º–µ—Ç—Ä–æ",
              type: "number"
            }}
            secondInput={{
              value: specialOperations.Y.toString(),
              onChange: (value) => setSpecialOperations(prev => ({ ...prev, Y: parseFloat(value) || 0 })),
              placeholder: "Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –º–µ—Ç—Ä–æ",
              type: "number"
            }}
            onExecute={() => handleSpecialOperation("sortByMetroTime")}
          />
        </div>
      </div>

      <PopUpWindow isOpen={popupContent !== null} onClose={() => setPopupContent(null)}>
        <div className="p-6 text-gray-700 whitespace-pre-line">{popupContent}</div>
      </PopUpWindow>

      {toast && (
        <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />
      )}
    </div>
  );
};

interface OperationCardProps {
  icon: React.ReactNode;
  title: string;
  description: string;
  input?: {
    value: string;
    onChange: (value: string) => void;
    placeholder: string;
    type?: string;
  };
  secondInput?: {
    value: string;
    onChange: (value: string) => void;
    placeholder: string;
    type?: string;
  };
  onExecute: () => void;
}

const OperationCard: React.FC<OperationCardProps> = ({
  icon,
  title,
  description,
  input,
  secondInput,
  onExecute,
}) => (
  <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:border-blue-400 transition-all duration-300">
    <div className="flex items-center gap-4 mb-4">
      <div className="p-3 bg-gray-50 rounded-lg">{icon}</div>
      <div>
        <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
        <p className="text-sm text-gray-500">{description}</p>
      </div>
    </div>
    
    {input && (
      <input
        type={input.type || "text"}
        value={input.value}
        onChange={(e) => input.onChange(e.target.value)}
        placeholder={input.placeholder}
        className="w-full px-4 py-2 mb-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      />
    )}
    
    {secondInput && (
      <input
        type={secondInput.type || "text"}
        value={secondInput.value}
        onChange={(e) => secondInput.onChange(e.target.value)}
        placeholder={secondInput.placeholder}
        className="w-full px-4 py-2 mb-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      />
    )}

    <button
      onClick={onExecute}
      className="w-full px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-300"
    >
      –í—ã–ø–æ–ª–Ω–∏—Ç—å
    </button>
  </div>
);

export default Dashboard;
